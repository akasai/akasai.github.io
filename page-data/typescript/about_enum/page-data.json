{"componentChunkName":"component---src-template-post-tsx","path":"/typescript/about_enum/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://akasai.space","comment":{"utterances":"akasai/akasai.github.io"}}},"post":{"id":"c6bb16c2-0994-531a-bfcb-f81118211b14","excerpt":"은 Javascript와 Typescript와의 여러가지 차이점 중 한가지이다. 다양한 시스템 언어들이 Enum을 사용하고 있기 때문에 굳이 자세히 설명하지 않아도 될 것 같다. Enum Enum…","timeToRead":2,"html":"<p><code class=\"language-text\">Enum Type</code>은 Javascript와 Typescript와의 여러가지 차이점 중 한가지이다.</p>\n<p>다양한 시스템 언어들이 <strong>Enum</strong>을 사용하고 있기 때문에 굳이 자세히 설명하지 않아도 될 것 같다.</p>\n<hr>\n<h2 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum</h2>\n<p><strong>Enum</strong> 타입을 사용하는 이유는 다양하다.</p>\n<ol>\n<li>\n<p>가독성을 높힌다.</p>\n<p>공통된 특징을 지닌 변수를 한 곳에 묶어서 사용할 수 있기 때문에 가독성이 높아진다.</p>\n</li>\n<li>\n<p>엄격한 타입정의가 가능하다.</p>\n<p>Typescript를 사용하는 이유중 한가지인 엄격한 형관리를 좀 더 타이트하게 할 수 있다.</p>\n</li>\n<li>\n<p>자칫 발생할 수 있는 값 변경을 방지할 수 있다.</p>\n<p>2번에서 이어지는 형관리를 통해 자칫 발생할 수 있는 값 변경을 방지할 수 있다. (<em>Enum에 정의되지 않는 데이터</em>)</p>\n</li>\n</ol>\n<h3 id=\"enum의-사용\" style=\"position:relative;\"><a href=\"#enum%EC%9D%98-%EC%82%AC%EC%9A%A9\" aria-label=\"enum의 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum의 사용</h3>\n<p>간단하게 <em>Typescript</em>에서 <code class=\"language-text\">Enum</code>을 사용해 보자면</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">COUNT1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ZERO</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">FIRST</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">SECOND</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">COUNT1</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ZERO</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n\n\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">COUNT2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">FIRST</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">SECOND</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">THIRD</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">COUNT2</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECOND</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">COUNT3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">FIRST</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">SECOND</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">THIRD</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">COUNT3</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THIRD</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>사용법부터 특징까지 기존언어들과 매우 동일하다.</p>\n<p>별다른 값을 명시하지 않는다면 첫 데이터 순서대로 <code class=\"language-text\">0, 1, 2...</code> 값을 갖는다.</p>\n<p>초기 값을 숫자로 정의하면 나머지 데이터는 <code class=\"language-text\">+1</code> 만큼 연산된 숫자를 차례로 갖는다.</p>\n<br>\n<p>만약 숫자가 아닐 경우엔 정확히 데이터를 할당해 주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">ALPHABET</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// TS1061: Enum member must have initializer.</span>\n    <span class=\"token constant\">C</span> <span class=\"token comment\">// TS1061: Enum member must have initializer.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"enum--object\" style=\"position:relative;\"><a href=\"#enum--object\" aria-label=\"enum  object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum == Object??</h3>\n<p>Typescript에서 Enum의 가장 큰 특이점은 바로 Object라는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">STATUS</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">SUCCESS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">FAIL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">PROGRESS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'g'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { SUCCESS: 's', FAIL: 'f', PENDING: 'p', PROGRESS: 'g' }</span></code></pre></div>\n<p>이것이 가능한 이유는 tsc를 이용해 컴파일해보면 쉽게 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">STATUS</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"FAIL\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"PENDING\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"PROGRESS\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 <strong>Object</strong>에 각 <strong>key</strong>값을 할당해주는 방식으로 컴파일된다.</p>\n<p>결국 Object라고 볼 수 있다.</p>\n<p>이를 알고 활용하면 <code class=\"language-text\">Object내장함수</code>를 이용하여 여러가지 응용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">STATUS</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">SUCCESS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">FAIL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">PENDING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">PROGRESS</span> <span class=\"token operator\">=</span> <span class=\"token string\">'g'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 'SUCCESS', 'FAIL', 'PENDING', 'PROGRESS' ]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 's', 'f', 'p', 'g' ]</span></code></pre></div>","fields":{"slug":"/typescript/about_enum/"},"frontmatter":{"title":"Enum","series_num":0,"date":"Oct 28. 2020","tags":["Typescript","Enum"]},"headings":[{"value":"Enum","depth":2,"id":"enum"},{"value":"Enum의 사용","depth":3,"id":"enum의-사용"},{"value":"Enum == Object??","depth":3,"id":"enum--object"}]},"related":{"nodes":[{"fields":{"slug":"/typescript/about_closure/"},"frontmatter":{"title":"Closure와 Private","date":"Oct 24. 2020"}},{"fields":{"slug":"/typescript/about_typescript_4_1/"},"frontmatter":{"title":"Typescript 4.1","date":"Dec 12. 2020"}},{"fields":{"slug":"/typescript/typescript_solid_1/"},"frontmatter":{"title":"solid하게 SOLID (1)","date":"Sep 18. 2020"}},{"fields":{"slug":"/typescript/typescript_solid_2/"},"frontmatter":{"title":"solid하게 SOLID (2)","date":"Sep 19. 2020"}}]}},"pageContext":{"id":"c6bb16c2-0994-531a-bfcb-f81118211b14","slug":"/typescript/about_enum/","series_name":"","category":"Typescript","previous":{"fields":{"slug":"/typescript/about_closure/"},"frontmatter":{"title":"Closure와 Private"}},"next":{"fields":{"slug":"/docker/docker_question/"},"frontmatter":{"title":"도커 용어 정리"}}}},"staticQueryHashes":["1069093791","1381152472","1821008744","278901532","3528274121"]}