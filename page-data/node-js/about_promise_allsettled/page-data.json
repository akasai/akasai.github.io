{"componentChunkName":"component---src-template-post-tsx","path":"/node-js/about_promise_allsettled/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://akasai.space","comment":{"utterances":"akasai/akasai.github.io"}}},"post":{"id":"030fe483-a9d4-5a02-ad6e-55167303dc37","excerpt":"Promise.allSettled함수는 iterator의 모든 Promise함수들의 결과가 처리( 또는 )될 때까지 대기한 뒤 결과를 반환하는 함수입니다. 이와 관련된 내용을 알아보려 합니다. Promise.all…","timeToRead":4,"html":"<p><strong>Promise.allSettled</strong>함수는 iterator의 모든 Promise함수들의 결과가 처리(<code class=\"language-text\">fulfilled</code> 또는 <code class=\"language-text\">rejected</code>)될 때까지 대기한 뒤 결과를 반환하는 함수입니다.</p>\n<p>이와 관련된 내용을 알아보려 합니다.</p>\n<hr>\n<p><strong>Promise.all</strong>은 여러개의 <code class=\"language-text\">PromiseLike</code>함수들을 병렬로 실행하여 효율성을 높여주는 함수로 많이 사용되고 있습니다.</p>\n<p>iterator형태의 매개변수를 받고 배열형태의 결과값을 반환합니다.</p>\n<p>병렬로 처리할 수 있다는 편의성과 반대로 iterator안의 함수가 <span class=\"em red\">한 개라도 reject된다면 Promise.all 전체에서 exception이 발생</span>하는 특징이 있습니다.</p>\n<p>이것이 Promise.allSettled와 Promise.all의 <strong>가장 큰 차이점</strong>입니다.</p>\n<p>단점이라고 할 수는 없지만, 특정 상황에서는 불편함을 겪을 수 있는 특징입니다.</p>\n<h2 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h2>\n<ol>\n<li><code class=\"language-text\">PromiseLike</code> 타입의 <strong>배열형태의 결과</strong>를 반환합니다.</li>\n<li>각 <strong>결과 Object</strong>는 두가지 프로퍼티(<strong>status</strong> &#x26; <strong>reason/value</strong>)를 가질 수 있습니다.</li>\n<li><strong>status</strong>는 <code class=\"language-text\">fulfilled</code>과 <code class=\"language-text\">rejected</code>를 값으로 가집니다.</li>\n<li><strong>value</strong>는 status가 <code class=\"language-text\">fulfilled</code>일 때, <strong>reason</strong>은 <code class=\"language-text\">rejected</code>일 때 갖는 값입니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token generic-function\"><span class=\"token function\">allSettled</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>PromiseSettledResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PromiseLike<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>1번 특징처럼 <strong>allSettled</strong>함수는 위와 같은 형태의 Response type을 갖습니다.</p>\n<p><code class=\"language-text\">PromiseSettledResult</code> type은 아래와 같이 정의되므로 2,3,4번과 같은 특징을 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PromiseSettledResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> PromiseFulfilledResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> PromiseRejectedResult<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PromiseFulfilledResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PromiseRejectedResult</span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">;</span>\n    reason<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h2>\n<p>이는 <code class=\"language-text\">Node.js 12.9</code> 이상, <code class=\"language-text\">es2020 lib</code>, <code class=\"language-text\">TS 3.9</code> 이상에서 정의되어 있고, 특정 브라우저(IE)는 사용하지 못합니다.</p>\n<p><strong><a href=\"https://tc39.es/proposal-promise-allSettled/#sec-performpromiseallsettled\">TC39 스펙</a>은</strong> 아래와 같이 사용법을 정의합니다.</p>\n<ol>\n<li>Accepts <code class=\"language-text\">iterable</code> object as an argument.</li>\n<li>If <code class=\"language-text\">not iterable</code>, <code class=\"language-text\">throw</code> an <code class=\"language-text\">exception</code> with an error message.</li>\n<li>Iterate the argument if it is <code class=\"language-text\">iterable</code>.</li>\n<li>Keep the <code class=\"language-text\">results</code> in an array.</li>\n<li>Wait for all promises to either get <code class=\"language-text\">resolved</code>/<code class=\"language-text\">rejected</code>.</li>\n<li>Return the <code class=\"language-text\">results</code>.</li>\n</ol>\n<h2 id=\"구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-label=\"구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token comment\">/**\n * user 목록을 조회하는 함수\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'### Get API start'</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'invalid argument'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://reqres.in/api/users?page=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>API호출을 통해 정보를 조회하는 간단한 로직을 구현하였습니다. 만약 argument가 <strong>0이라면 error를 발생</strong>하게 유도하였습니다.</p>\n<h3 id=\"promiseall\" style=\"position:relative;\"><a href=\"#promiseall\" aria-label=\"promiseall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.all</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ### Get API start, 0</span>\n<span class=\"token comment\">// ### Get API start, 1</span>\n<span class=\"token comment\">// error [Error: invalid argument]</span></code></pre></div>\n<p><strong>Promise.all</strong>을 이용한 로직을 구현해보면 위와 같은 결과를 볼 수 있습니다.</p>\n<p>실제로 task(iterator)가 동작하였지만, exception발생으로 인해 result가 아닌 <span class=\"em red\">error</span>를 확인할 수 있었습니다.</p>\n<p><em><strong>결론적으로 우리가 원하는 response를 확인할 수 없었습니다.</strong></em></p>\n<h3 id=\"promiseallsettled\" style=\"position:relative;\"><a href=\"#promiseallsettled\" aria-label=\"promiseallsettled permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.allSettled</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ### Get API start, 0</span>\n<span class=\"token comment\">// ### Get API start, 1</span>\n<span class=\"token comment\">// result [ </span>\n<span class=\"token comment\">//    { status: 'rejected', reason: [Error: invalid argument] }, </span>\n<span class=\"token comment\">//    { status: 'fulfilled', value: Response {...} }</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p><strong>Promise.all</strong>과 다르게 reject가 발생했음에도 <strong>정상적으로 결과</strong>를 받아 볼 수 있었습니다.</p>\n<p>이 결과처럼 task(iterator)의 성공여부과 상관없이 결과를 보장한다는 점에서 이점이 있는 것 같습니다.</p>\n<h2 id=\"이슈\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%8A%88\" aria-label=\"이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이슈</h2>\n<p>비교적 최근에 추가된 함수이므로 Reference가 다양하지 않습니다.</p>\n<p><code class=\"language-text\">TS4.5</code> 미만의 환경에서는 정상적으로 Type 정의가 되지 않습니다.</p>\n<p>위 예제를 예로들어 설명하자면, Response Type이 <code class=\"language-text\">PromiseLike</code>형태로 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token generic-function\"><span class=\"token function\">allSettled</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>PromiseSettledResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PromiseLike<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PromiseFulfilledResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>때문에 <code class=\"language-text\">fulfilled</code>된 결과가 반환되면 이미 <strong>await</strong>된 Response가 아닌 <strong>Promise&#x3C;{Pending}></strong> 형태로\n정의되는 현상을 볼 수 있습니다.</p>\n<p>물론 Type 정의의 문제이기 때문에 <strong>IDE상의 컴파일 에러</strong>일 뿐이지만, 개발 효율성이 저하되는 문제를 야기합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">apiCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>someThing<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// Error TS2339: Property 'someThing' does not exist on type 'Promise&lt;Response>'</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ### Get API start, 0</span>\n<span class=\"token comment\">// ### Get API start, 1</span>\n<span class=\"token comment\">// result [ </span>\n<span class=\"token comment\">//    { status: 'rejected', reason: [Error: invalid argument] }, </span>\n<span class=\"token comment\">//    { status: 'fulfilled', value: Response {...} }</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p>이 문제는 <code class=\"language-text\">TS4.5</code>버전이 Release되어 <code class=\"language-text\">Awaited</code> Type이 추가된 후 해결되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token generic-function\"><span class=\"token function\">allSettled</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>values<span class=\"token operator\">:</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> PromiseLike<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>PromiseSettledResult<span class=\"token operator\">&lt;</span>Awaited<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://tc39.es/ecma262/#sec-promise.allsettled\">tc39.es</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\">Promise.allSettled()</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/microsoft/TypeScript/blob/main/src/lib/es2020.promise.d.ts\">microsoft/TypeScript</a></p>\n</li>\n</ul>","fields":{"slug":"/node-js/about_promise_allsettled/"},"frontmatter":{"title":"Promise.allSettled()","series_num":0,"date":"Dec 08. 2021","tags":["Typescript","Javascript","Promise","Node.js","es2020"]},"headings":[{"value":"특징","depth":2,"id":"특징"},{"value":"사용법","depth":2,"id":"사용법"},{"value":"구현","depth":2,"id":"구현"},{"value":"Promise.all","depth":3,"id":"promiseall"},{"value":"Promise.allSettled","depth":3,"id":"promiseallsettled"},{"value":"이슈","depth":2,"id":"이슈"},{"value":"Reference","depth":2,"id":"reference"}]},"related":{"nodes":[{"fields":{"slug":"/node-js/about_node_js_1/"},"frontmatter":{"title":"Node.js의 구조","date":"Oct 06. 2020"}},{"fields":{"slug":"/node-js/about_node_js_2/"},"frontmatter":{"title":"Node.js의 이벤트 루프와 비동기","date":"Oct 08. 2020"}},{"fields":{"slug":"/node-js/about_node_js_3/"},"frontmatter":{"title":"비동기와 논블로킹","date":"Oct 12. 2020"}},{"fields":{"slug":"/node-js/about_node_js_4/"},"frontmatter":{"title":"Node.js의 스레드","date":"Oct 13. 2020"}},{"fields":{"slug":"/node-js/about_node_js_5/"},"frontmatter":{"title":"Node.js의 I/O 동작","date":"Oct 21. 2020"}},{"fields":{"slug":"/node-js/about_node_js_package_top10/"},"frontmatter":{"title":"2020 TOP 10 Node.js Package & Framework","date":"Oct 12. 2020"}},{"fields":{"slug":"/node-js/solving_promise_bottleneck/"},"frontmatter":{"title":"async/await 병목현상 줄여보기","date":"Sep 21. 2020"}}]}},"pageContext":{"id":"030fe483-a9d4-5a02-ad6e-55167303dc37","slug":"/node-js/about_promise_allsettled/","series_name":"","category":"Node.js","previous":{"fields":{"slug":"/kubernetes/about_pod/"},"frontmatter":{"title":"Pod란?"}},"next":null}},"staticQueryHashes":["1069093791","1381152472","1821008744","278901532","3528274121"]}