{"version":3,"sources":["webpack://blog/./src/template/post.tsx"],"names":["PostTemplate","React","pageContext","data","category","series_name","next","previous","site","post","series","related","siteMetadata","siteUrl","comment","html","id","excerpt","timeToRead","slug","fields","frontmatter","title","tags","date","series_num","headerData","url","replace","postMeta","description","created_at","isBlogPost","tagList"],"mappings":"0IAoBMA,EAAoEC,QAAW,YAA4B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAC9EC,GAA6BF,EAA1CG,YAA0CH,EAA7BE,UAAUE,EAAmBJ,EAAnBI,KAAMC,EAAaL,EAAbK,SAC7BC,EAAgCL,EAAhCK,KAAMC,EAA0BN,EAA1BM,KACd,GADwCN,EAApBO,OAAoBP,EAAZQ,QACmBH,EAAvCI,cAAgBC,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,QACrBC,GAAgGN,EAApGO,GAAoGP,EAAhGM,MAAME,EAA0FR,EAA1FQ,QAASC,EAAiFT,EAAjFS,WAAsBC,EAA2DV,EAArEW,OAAUD,KAAjD,EAA4GV,EAAnDY,YAAeC,EAAxE,EAAwEA,MAAOC,EAA/E,EAA+EA,KAAkBC,GAAjG,EAAqFC,WAArF,EAAiGD,MAI3FE,EAAa,CAAEtB,WAAUkB,QAAOE,OAAMN,aAAYS,IAAI,GADLd,EACsBM,EAAKS,QAAQ,OAAO,KAC3FC,EAAW,CACfP,QACAQ,YAAab,EACbE,KAAMA,EAAKS,QAAQ,OAAO,IAC1BL,OACAQ,WAAYP,GAGd,OACE,gBAAC,IAAD,KACE,gBAAC,KAAD,CAAKK,SAAUA,EAAUG,YAAU,IACnC,gBAAC,KAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAY7B,KAAMuB,IAClB,2BACA,gBAAC,KAAD,CAAcX,KAAMA,IACpB,gBAAC,KAAD,CAAakB,QAASV,IACtB,gBAAC,KAAD,CAAMJ,KAAMA,IAEZ,2BACA,gBAAC,KAAD,MAEA,2BACA,gBAAC,KAAD,CAAWb,KAAMA,EAAMC,SAAUA,IACjC,gBAAC,KAAD,CAASJ,KAAMW,UAQzB","file":"component---src-template-post-tsx-9cf2b8b5aeee2ba69a72.js","sourcesContent":["import {\n  Clap,\n  Comment,\n  Main,\n  Navigator,\n  PostBio,\n  PostContents,\n  PostHeader,\n  PostTagList,\n  PostWrapper,\n  SEO\n} from '@components'\nimport { PageContext, PageProps, PostQueryResponse } from '@constant'\nimport Layout from '@layout'\nimport { graphql } from 'gatsby'\nimport 'katex/dist/katex.min.css'\nimport React from 'react'\n\nimport '../styles/markup.scss'\n\nconst PostTemplate: React.FC<PageProps<PostQueryResponse, PageContext>> = React.memo(({ pageContext, data }) => {\n  const { series_name, category, next, previous } = pageContext\n  const { site, post, series, related } = data\n  const { siteMetadata: { siteUrl, comment } } = site\n  const { id, html, excerpt, timeToRead, fields: { slug }, frontmatter: { title, tags, series_num, date } } = post\n\n  const isLocal = process.env.NODE_ENV === 'development'\n  const baseDomain = isLocal ? 'http://localhost:8000' : siteUrl\n  const headerData = { category, title, date, timeToRead, url: `${baseDomain}${slug.replace(/\\/$/g,'')}` }\n  const postMeta = {\n    title,\n    description: excerpt,\n    slug: slug.replace(/\\/$/g,''), //.replace(/[^\\w\\d-]/g, ''),\n    tags,\n    created_at: date\n  }\n\n  return (\n    <Layout>\n      <SEO postMeta={postMeta} isBlogPost/>\n      <Main>\n        <PostWrapper>\n          <PostHeader data={headerData}/>\n          <hr/>\n          <PostContents html={html}/>\n          <PostTagList tagList={tags}/>\n          <Clap slug={slug}/>\n          {/*<RelatedPost category={category} relatedList={related.nodes}/>*/}\n          <hr/>\n          <PostBio/>\n          {/*/!* TODO: share*!/*/}\n          <hr/>\n          <Navigator next={next} previous={previous}/>\n          <Comment data={comment}/>\n        </PostWrapper>\n      </Main>\n    </Layout>\n  )\n})\n\n\nexport default PostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($id: String! $slug: String! $category: String) {\n    site {\n      siteMetadata {\n        siteUrl\n        comment {\n          giscus\n          repo_id\n          category_id\n        }\n      }\n    }\n    post: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 128)\n      timeToRead\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        series_num\n        date(formatString: \"MMM DD. YYYY\")\n        tags\n      }\n      headings {\n        value\n        depth\n        id\n      }\n    }\n\n    related: allMarkdownRemark(\n      filter: {id: {ne: $id} frontmatter: {category: {eq: $category}}}\n      limit: 8\n    ) {\n      nodes {\n         fields {\n           slug\n         }\n         frontmatter {\n          title\n          date(formatString: \"MMM DD. YYYY\")\n        }\n      }\n    }\n  }\n`\n\n// {\n// !!series.nodes.length &&\n// <Series seriesName={series_name} curSeriesNum={series_num} seriesList={series.nodes}/>\n// }\n\n// series: allMarkdownRemark(\n//   filter: {frontmatter: {series_name: {eq: $series_name ne: \"\"}}}\n// sort: {order: ASC, fields: frontmatter___series_num}\n// ) {\n//   nodes {\n//     fields {\n//       slug\n//     }\n//     frontmatter {\n//       title\n//       series_name\n//       series_num\n//       date(formatString: \"MMM DD. YYYY\")\n//     }\n//   }\n// }\n"],"sourceRoot":""}